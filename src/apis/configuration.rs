/*
 * VRChat API Documentation
 *
 *
 * Contact: me@ariesclark.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use std::sync::Arc;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    pub cookie_provider: Arc<reqwest::cookie::Jar>,
    pub basic_auth: Option<BasicAuth>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        let cookie_provider = Arc::new(reqwest::cookie::Jar::default());

        Configuration {
            base_path: "https://api.vrchat.cloud/api/1".to_owned(),
            user_agent: Some("vrchatapi-rust".to_owned()),
            client: reqwest::Client::builder()
                .cookie_provider(cookie_provider.clone())
                .build()
                .unwrap(),
            cookie_provider,
            basic_auth: None,
        }
    }
}
